<Datos><Nombre></Nombre><Icono>AA==</Icono><Version><Mayor>0</Mayor><Menor>0</Menor><Revision>0</Revision><AutoIncr>0</AutoIncr></Version><Info/><Contenido>'Este es el primer programa compilador 
'siguiendo el libro de Jack W. Crenshaw
'En http://compilers.iecc.com/crenshaw/tutor1.txt
Importar "herramientas.prp"

'Declaraci$F3n de constante tabulador 
Const TAB=#32#32#32#32
Const SUMA=43
Const RESTA=45

Const CrLf = #13#10

'Matriz para contener los valores de la A-Z
Var A_Z_65_90[]:Byte

'Matriz para contener los valores de la a-z
Var a_z_97_122[]:Byte

'Matriz para contener los d$EDgitos 0-9
Var d$EDgitos_48_57[]:Byte

'Clase para manejo de secuencia de caracteres
Var sec:cSecuenciaDeCadena

'Variable para mostrar mensajes de Salida
Var Salida:Cadena

'Declaracion de variable VER
'como tipo byte
Var VER: Byte

Proc escribirLn(Opcional cad:Cadena = "" )
'escribir en la variable de Salida
'con nueva l$EDnea al final
    Salida = Salida + cad + CrLf
FinProc

Proc escribir(Opcional cad:Cadena = "" )
'Escribir en la variable de Salida
    Salida = Salida + cad
FinProc

Proc carMay(car:Byte):Byte
'Devolver caracter en may$FAscula
    Si Car &gt;= 97 And Car &lt;= 122
        Resultado = car - 32
    SiNo
        Resultado = car
    FinSi
FinProc

Proc estaEn(car:Byte,mByte[]:Byte):Booleano
'Verifica que el primer caracter este dentro de la matriz
    Var i:Entero
    Resultado = Falso
    Contar i=0 A Long(mByte)-1
        Si car = mByte[i]
            Resultado = Verd
            Salir
        FinSi
    Seguir
FinProc

Proc obtenerCar$E1cter
'Leer un car$E1cter y almacenarlo en VER
    VER = sec.leer()
FinProc

Proc error(cad:Cadena)
'Mostrar error al usuario
    escribirLn()
    escribirLn("Error: " + cad + ".")
FinProc

Proc abortar(cad:Cadena)
'Reportar error y terminar programa
    error(cad)
'PorHacer: Terminar la ejecuci$F3n 
'          del programa en la sig. l$EDnea
    'Fin
FinProc

Proc esperaba(cad:Cadena)
'Reportar el(los) valor(es) esperado(s)
    abortar( "Se esperaba " + cad )
FinProc

Proc coincide(x:Byte)
'Verificar si conicide el car$E1cter
'con VER
    Si VER = x Entonces
        obtenerCar$E1cter()
    SiNo
        esperaba( "'" + Carac(x) + "'" )
    FinSi
FinProc

Proc esAlfa(car:Byte):Booleano
'Verificar si es una letra
    Resultado = estaEn(carMay(car),A_Z_65_90)
FinProc

Proc esD$EDgito(car:Byte):Booleano
'Verificar si es un n$FAmero
    Resultado = estaEn(car,d$EDgitos_48_57)
FinProc

Proc obtenerNombre():Byte
'Obtener un identificador
    Si Not esAlfa(VER) Entonces
        esperaba("Nombre")
    FinSi
    Resultado = carMay(VER)
    obtenerCar$E1cter()
FinProc

Proc obtenerN$FAmero():Byte
'Obtener un n$FAmero
    Si Not esD$EDgito(VER) Entonces
        esperaba("D$EDgito")
    FinSi
    Resultado = VER
    obtenerCar$E1cter()
FinProc

Proc emitir(cad:Cadena)
'Escribir cadena con tabulaci$F3n
    escribir( TAB + cad )
FinProc

Proc emitirLn(cad:Cadena)
'Escribir cadena con salto de l$EDnea
    emitir(cad)
    escribirLn()
FinProc

Proc t$E9rmino()
    emitirLn("MOVE #" + Carac(obtenerN$FAmero) + ",D0")
FinProc

Proc adici$F3n
'Reconocer y traducir adici$F3n
    coincide(SUMA)'+
    t$E9rmino()
    emitirLn("ADD D1,D0")
FinProc

Proc sustracci$F3n
'Reconocer y traducir sustracci$F3n
    coincide(RESTA)'-
    t$E9rmino()
    emitirLn("SUB D1,D0")
FinProc

Proc Expresi$F3n()
'Leer y traducir expresi$F3n
    t$E9rmino()
    emitirLn("MOVE D0,D1")
    Seleccionar VER
        Caso SUMA
	         adici$F3n()
        Caso RESTA
	         sustracci$F3n()
        Caso Otro
            esperaba("Operaci$F3n de adici$F3n")
    FinSeleccionar
FinProc

Proc Inicializar
'Inicializar programa
'Inicializar matrices
A_Z_65_90 = [65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90]
a_z_97_122 = [97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122]
d$EDgitos_48_57 = [48,49,50,51,52,53,54,55,56,57]

'Cargar programa
sec = Nuevo cSecuenciaDeCadena("1+2")

'Obtener primer car$E1cter
obtenerCar$E1cter()
Expresi$F3n()
FinProc

'Punto de entrada a programa principal
Inicializar()

'Mensajes de salida
Mensaje(Salida,pscInformaci$F3n+pscAceptarSolo+pscDef1+pscModalSistema+pscAceptar)

'Fin del programa
Fin
</Contenido></Datos>
